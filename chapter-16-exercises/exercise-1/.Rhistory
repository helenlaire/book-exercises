install.packages("ggplot2")
library("ggplot2")
library("ggplot2")
ggplot(data = diamonds_sample)+
gem_point(mapping = aes(x= carat, y = price))
diamonds_sample <- sample_n(diamonds, 1000)
nrow(diamonds_sample)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
# Exercise 1: ggplot2 basics
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
install.packages("ggplot2")
library("ggplot2")
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
nrow(diamonds_sample)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample)+
gem_point(mapping = aes(x= carat, y = price))
install.packages("ggplot2")
ggplot(data = diamonds_sample)+
gem_point(mapping = aes(x= carat, y = price))
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
diamonds_sample <- sample_n(diamonds, 1000)
diamonds_sample <- sample_n(diamonds, 1000)
diamonds_sample <- sample_n(diamonds, 1000)
diamonds_sample <- sample_n(diamonds, 1000)
library("dyplr")
library("dplyr")
library("dplyr")
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
diamonds_sample <- sample_n(diamonds, 1000)
nrow(diamonds_sample)
ggplot(data = diamonds_sample)
ggplot(data = diamonds_sample)+
gem_point(mapping = aes(x= carat, y = price))
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x= carat, y = price))
ggplot(data = diamonds_sample)+
geom_point(mapping = aes(x= carat, y = price, color = clarity))
ggplot(data = diamonds)+
geom_point(mapping = aes(x= carat, y = price, color = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = price, y = carat),
color = "blue"             )
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = price, y = carat, shape = cut),
color = "blue"             )
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = price, y = carat, shape = cut),
color = "blue"             )
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = carat, shape = cut, size = price),
color = "blue"             )
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = carat, size = price),
color = "blue"             )
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = carat, size = price),color = price          )
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = carat, size = price,color = price     )     )
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = carat, size = price,color = price)       )
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x= carat, y = price, color = cut))
