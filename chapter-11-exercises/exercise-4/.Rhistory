install.packages("nycflights13")
library("nycflights13"")
library("nycflights13")
library("nycflights13")
library("dplyr")
View("nycflights13")
install.packages("nycflights13")
library("nycflights13")
install.packages("nycflights13")
library("dplyr")
View("nycflights13")
View("nycflights13")
View(nycflights13)
View(nycflights13)
View(nycflights13)
View(flights)
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
View(flights)
View(flights)
nrow(flights)
ncol(flights)
ncol(flights)
nrow(flights)
colnames(flights)
?flights
?flights
mutate(flights, overall_time = arr_delay - dep_delay)
nrow(flights)
ncol(flights)
colnames(flights)
?flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, overall_time = arr_delay - dep_delay)
View(flights)
flights <- mutate(flights, overall_time = arr_delay - dep_delay)
View(flights)
flights <- arrange (flights, -overall_time)
View(flights)
flights <- arrange (flights, -overall_time)
flights <- mutate(flights, overall_time = arr_delay - dep_delay)
View(flights)
flights <- arrange (flights, -overall_time)
flights <- arrange (flights, -(overall_time))
View(flights)
View(flights)
flights <- arrange (flights, -(overall_time))
View(flights)
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
View(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
colnames(flights)
#?flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, overall_time = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange (flights, -(overall_time))
View(flights)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
# Make a histogram of the amount of time gained using the `hist()` function
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
View(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
colnames(flights)
#?flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, overall_time = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange (flights, -(overall_time))
View(flights)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
# Make a histogram of the amount of time gained using the `hist()` function
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
View(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
colnames(flights)
#?flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, overall_time = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange (flights, -(overall_time))
View(flights)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
# Make a histogram of the amount of time gained using the `hist()` function
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights <- mutate(flights, overall_time = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange (flights, -(overall_time))
View(flights)
flights <- arrange (flights, -overall_time)
?hist
hist(flights,over_time)
hist(flights$over_time)
hist(flights$overall_time)
flights <- flights(na.rm) %>%
mean()
flights <- na.rm(flights) %>%
mean()
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$overall_time, na.rm = TRUE)
to_sea <- filter(flights, dest == SEA) %>%
select(orgin,destination,overall_times)
to_sea <- filter(flights, dest == SEA) %>%
select(orgin,destination,overall_time)
to_sea <- filter(flights, dest == SEA) %>%
select(orgin,destination,overall_time)
to_sea <- flights %>% filter(dest == SEA) %>%
select(orgin,destination,overall_time)
to_sea <- flights %>% filter(dest == SEA) %>%
select(orgin,dest,overall_time)
to_sea <- flights %>%  select(orgin,dest,overall_time) %>%
filter(dest == SEA)
to_sea <- flights %>%  select(orgin,dest,overall_time) %>%
filter(dest == "SEA")
to_sea <- flights %>%  select(origin,dest,overall_time) %>%
filter(dest == "SEA")
to_sea <- flights %>%  filter(dest == "SEA")
%>% select(origin,dest,overall_time)
to_sea <- flights %>%  filter(dest == "SEA")%>%
select(origin,dest,overall_time)
View(to_sea)
mean(to_sea$overall_time, na.rm = TRUE)
filter(flights, origin == "JFK",desk == "SEA") %>%
summarize(
avg = mean(air_time, na.rm = TRUE),
max = max(air_time, na.rm = TRUE),
min = min(air_time, na.rm = TRUE),
)
filter(flights, origin == "JFK",desk == "SEA") %>%
summarize(
avg = mean(air_time, na.rm = TRUE),
max = max(air_time, na.rm = TRUE),
min = min(air_time, na.rm = TRUE),
)
filter(flights, origin == "JFK",desk == "SEA") %>%
summarize(
avg = mean(air_time, na.rm = TRUE),
max = max(air_time, na.rm = TRUE),
min = min(air_time, na.rm = TRUE),
)
filter(flights, origin == "JFK",desk == "SEA") %>%
summarize(
avg = mean(air_time, na.rm = TRUE),
max = max(air_time, na.rm = TRUE),
min = min(air_time, na.rm = TRUE),
)
filter(flights, origin == "JFK",dest == "SEA") %>%
summarize(
avg = mean(air_time, na.rm = TRUE),
max = max(air_time, na.rm = TRUE),
min = min(air_time, na.rm = TRUE),
)
View(flights)
