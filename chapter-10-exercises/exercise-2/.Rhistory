employee <- "Employee"
employee_number <- 1:100
hundred_emplyee <- paste(employee, employee_number)
print(hundred_emplyee)
paste("Employee", 1:100)
salary_2017 < runif(100,40000,50000)
salary_2017
salary_2017 < runif(100,40000,50000)
salary_2017
salary_2017 < runif(100,40000,50000)
salary_2017
salary_2017 <- runif(100,40000,50000)
salary_2017
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjust <- runif(100, -5000, 10000)
salaries <- data.frame(employee, salary_2017, salary_adjust, stringsAsFactors = FALSE)
View(salaries)
salaries$salary_2018 <- salary$salary_2017+salary$salary_adjust
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_2018 <- salaries$salary_2017+salary$salaries_adjust
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_2018 <- salaries$salary_2017+salaries$salary_adjust
View(salaries)# Add a column to the `salaries` data frame that has a value of `TRUE` if the
salaries$got_raise <- salaries$salary_adjust>0
View(salaries)
salaries[57,"salary_2018"]
salaries&salary_2018[57]
salaries$salary_2018[57]
# How many employees got a raise?
nrows(salaries[salaries$got_raise == TRUE,])
# What was the dollar value of the highest raise?
max(salaries$salary_adjust)
salaries[salaries$salary_adjust == max(salaries$salary_adjust]
salaries[ salaries$salary_adjust == max(salaries$salary_adjust]
salaries[ salaries$salary_adjust == max(salaries$salary_adjust)]
salaries[ salaries$salary_adjust == max(salaries$salary_adjust)]
salaries[ salaries$salary_adjust == max(salaries$salary_adjust),]
# What was the dollar value of the highest raise?
max(salaries$salary_adjust)
# How many employees got a raise?
nrows(salaries[salaries$got_raise == TRUE,0])
# How many employees got a raise?
nrows(salaries[salaries$got_raise == TRUE,])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE,])
# How many employees got a raise?
View(nrow(salaries[salaries$got_raise == TRUE,]))
# How many employees got a raise?
View(salaries[salaries$got_raise == TRUE,])
# How many employees got a raise?
nrow((salaries[salaries$got_raise == TRUE,])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE,])
# How many employees got a raise?
nrow(salaries[salaries$got_raise,])
salaries$salary_2018[57]
salaries$salary_2018$57
salaries$57
# install stringr package
# install.packages("stringr")
library("stringr")
#################
#### PART 1 #####
#################
# 1 create a variable equal to my age
my_age <- 20
# 2 create a variable stores my name
my_name <- "Claire Zhang"
# 3 take name and age, return a hello statment
make_introduction <- function(my_age, my_name) {
introduction <- paste("Hello, my name is", my_name, "and I'm", my_age, "years old.")
introduction
}
# 4 make my hello statement, and print it
my_intro <- make_introduction(my_age, my_name)
print(my_intro)
# 5 replace part of my hello statement, and print it
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
# 6 create my intro with each word capitalzied, and print it
capital_intro <- str_to_title(my_intro)
print(capital_intro)
# 7 count the "e" in my hello statement
intro_e_count <- str_count(my_intro, pattern = "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
# 1 create a vector contains six books, and print it
books <- c("To Kill a Mockingbird", "1984", "Animal Farm", "The Hobbit", "The Giver", "Of Mice and Men")
print(books)
# 2 create a vector containing first three books, and print it
top_three_books <- books[c(1:3)]
print(top_three_books)
# 3 create a books review for all books
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
# 4 create a function remove one book from the vector
remove_book <- function(books, index_number) {
new_list <- books[-index_number]
new_list
}
# 5 remove the fourth book, and print it
books_without_four <- remove_book(books, 4)
print(books_without_four)
# 6 create a vector containing long title books
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
# 1 create a varible for numbers from 1 to 201
numbers <- 1:201
# 2 create a varible that squared the previous numbers
squared_numbers <- numbers^2
# 3 calculate the mean of the squared numbers and print it
squared_mean <- mean(squared_numbers)
print(squared_mean)
# 4 calculated the median of the squared numbers and print it
squared_median <- median(squared_numbers)
print(squared_median)
# 5 create a vairable contains numbers who has a whole number square root, and print it
squares <- numbers[round(sqrt(numbers)) == sqrt(numbers)]
print(squares)
#################
#### PART 4 #####
#################
# 1 create a variable containing spring break date
spring_break <- as.Date("2019/03/16")
# 2 create a varible that rpresents today's date
get_today_date <- Sys.Date()
# 3 calculate how many days are from today to spring break, and print it
days_to_break <- difftime(spring_break, get_today_date)
print(days_to_break)
# 4 create a birthday list for my family members
birthdays <- list(
Claire = as.Date("1998/08/22"),
Sarah = as.Date("1970/09/17"),
David = as.Date("1954/11/21"),
Tony = as.Date("1982/11/13")
)
# 5 extract the month and date of my mother's birthday, and print it
parent_bday <- format(birthdays$Sarah, "%m/%d")
print(parent_bday)
# 6 create a list of my family's birthday in 2019, and print it
change_to2019 <- function(current_birthday) {
current_birthday <- format(current_birthday, "%2019/%m/%d")
}
birthdays_2019 <- lapply(birthdays, change_to2019)
birthdays_2019 <- lapply(birthdays_2019, as.Date, origin = "%y/%m/%d")
print(birthdays_2019)
# 7 create a function to test whether given date has passed
date_has_passed <- function(input_date) {
input_date <- as.Date(format(input_date, "%2019/%m/%d"))
today_date <- Sys.Date()
difftime(input_date, today_date) < 0
}
# check if the deadline for the assignment has passed
print(date_has_passed(as.Date("2019/01/23")))
# 8 make a function which will produce a birthday announcement about how many days are from now to your next birthday
make_birthday_announcement <- function(given_name, given_date) {
if (date_has_passed(given_date)) {
next_year_birthday <- as.Date(format(given_date, "%2020/%m/%d"))
days_to_birthday <- difftime(next_year_birthday, Sys.Date())
} else {
days_to_birthday <- difftime(given_date, Sys.Date())
}
announcement <- paste0(given_name, "'s birthday is in")
announcement <- paste(announcement, days_to_birthday, "days")
}
# 9 make birthday announcement for all my family members, and print it
bday_announcement <- mapply(make_birthday_announcement, given_name = names(birthdays_2019), given_date = birthdays_2019)
print(bday_announcement)
clear
# install stringr package
# install.packages("stringr")
library("stringr")
#################
#### PART 1 #####
#################
# 1 create a variable equal to my age
my_age <- 20
# 2 create a variable stores my name
my_name <- "Claire Zhang"
# 3 take name and age, return a hello statment
make_introduction <- function(my_age, my_name) {
introduction <- paste("Hello, my name is", my_name, "and I'm", my_age, "years old.")
introduction
}
# 4 make my hello statement, and print it
my_intro <- make_introduction(my_age, my_name)
print(my_intro)
# 5 replace part of my hello statement, and print it
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
# 6 create my intro with each word capitalzied, and print it
capital_intro <- str_to_title(my_intro)
print(capital_intro)
# 7 count the "e" in my hello statement
intro_e_count <- str_count(my_intro, pattern = "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
# 1 create a vector contains six books, and print it
books <- c("To Kill a Mockingbird", "1984", "Animal Farm", "The Hobbit", "The Giver", "Of Mice and Men")
print(books)
# 2 create a vector containing first three books, and print it
top_three_books <- books[c(1:3)]
print(top_three_books)
# 3 create a books review for all books
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
# 4 create a function remove one book from the vector
remove_book <- function(books, index_number) {
new_list <- books[-index_number]
new_list
}
# 5 remove the fourth book, and print it
books_without_four <- remove_book(books, 4)
print(books_without_four)
# 6 create a vector containing long title books
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
# 1 create a varible for numbers from 1 to 201
numbers <- 1:201
# 2 create a varible that squared the previous numbers
squared_numbers <- numbers^2
# 3 calculate the mean of the squared numbers and print it
squared_mean <- mean(squared_numbers)
print(squared_mean)
# 4 calculated the median of the squared numbers and print it
squared_median <- median(squared_numbers)
print(squared_median)
# 5 create a vairable contains numbers who has a whole number square root, and print it
squares <- numbers[round(sqrt(numbers)) == sqrt(numbers)]
print(squares)
#################
#### PART 4 #####
#################
# 1 create a variable containing spring break date
spring_break <- as.Date("2019/03/16")
# 2 create a varible that rpresents today's date
get_today_date <- Sys.Date()
# 3 calculate how many days are from today to spring break, and print it
days_to_break <- difftime(spring_break, get_today_date)
print(days_to_break)
# 4 create a birthday list for my family members
birthdays <- list(
Claire = as.Date("1998/08/22"),
Sarah = as.Date("1970/09/17"),
David = as.Date("1954/11/21"),
Tony = as.Date("1982/11/13")
)
# 5 extract the month and date of my mother's birthday, and print it
parent_bday <- format(birthdays$Sarah, "%m/%d")
print(parent_bday)
# 6 create a list of my family's birthday in 2019, and print it
change_to2019 <- function(current_birthday) {
current_birthday <- format(current_birthday, "%2019/%m/%d")
}
birthdays_2019 <- lapply(birthdays, change_to2019)
birthdays_2019 <- lapply(birthdays_2019, as.Date, origin = "%y/%m/%d")
print(birthdays_2019)
# 7 create a function to test whether given date has passed
date_has_passed <- function(input_date) {
input_date <- as.Date(format(input_date, "%2019/%m/%d"))
today_date <- Sys.Date()
difftime(input_date, today_date) < 0
}
# check if the deadline for the assignment has passed
print(date_has_passed(as.Date("2019/01/23")))
# 8 make a function which will produce a birthday announcement about how many days are from now to your next birthday
make_birthday_announcement <- function(given_name, given_date) {
if (date_has_passed(given_date)) {
next_year_birthday <- as.Date(format(given_date, "%2020/%m/%d"))
days_to_birthday <- difftime(next_year_birthday, Sys.Date())
} else {
days_to_birthday <- difftime(given_date, Sys.Date())
}
announcement <- paste0(given_name, "'s birthday is in")
announcement <- paste(announcement, days_to_birthday, "days")
}
# 9 make birthday announcement for all my family members, and print it
bday_announcement <- mapply(make_birthday_announcement, given_name = names(birthdays_2019), given_date = birthdays_2019)
print(bday_announcement)
salaries[ salaries$salary_adjust == max(salaries$salary_adjust),]
salaries$salary_2018[57]
salary_57 <- salaries[salaries$employees == "Employee 57", "salaries_2018"]
salaries[ salaries$salary_adjust == max(salaries$salary_adjust),]
salaries[ "Employee",salaries$salary_adjust == max(salaries$salary_adjust)]
salaries[ "employee",salaries$salary_adjust == max(salaries$salary_adjust)]
salaries[ ,salaries$salary_adjust == max(salaries$salary_adjust)]
salaries[salaries$salary_adjust == max(salaries$salary_adjust),]
print(salaries[salaries$salary_adjust == max(salaries$salary_adjust),])
salaries["employee",salaries$salary_adjust == max(salaries$salary_adjust)]
# What was the dollar value of the highest raise?
max(salaries$salary_adjust)
salaries[salaries$salary_adjust == highest_raise, "employee"]
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$salary_adjust)
salaries[salaries$salary_adjust == highest_raise, "employee"]
employee <- paste("Employee", 1:100)
employee <- paste("Employee", 1:100)
salaries[salaries$salary_adjust == highest_raise, "employee"]
# What was the "name" of the employee who received the highest raise?
got_biggest_raise <- salaries[salaries$salary_adjustments == highest_raise, "employees"]
# What was the "name" of the employee who received the highest raise?
got_biggest_raise <- salaries[salaries$salary_adjustments == highest_raise, "employees"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustments == highest_raise, "employees"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustments == highest_raise, "employee"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustments == highest_raise, "employee"]
# What was the 2018 salary of Employee 57
salaries$salary_2018[57]
salaries["employee",salaries$salary_adjust == max(salaries$salary_adjust)]
salaries[salaries$salary_adjust == max(salaries$salary_adjust),]
salaries[salaries$salary_adjust == max(salaries$salary_adjust),"employee"]
employee <- paste("Employee", 1:100)
print(employee <- paste("Employee", 1:100))
salaries[salaries$salary_adjust == max(salaries$salary_adjust),]
salaries[salaries$salary_adjust == max(salaries$salary_adjust),salaries$salary_adjust"]
salaries[salaries$salary_adjust == max(salaries$salary_adjust),salaries$salary_adjust"]
salaries[salaries$salary_adjust == max(salaries$salary_adjust), salaries$salary_adjust]
salaries[salaries$salary_adjust == max(salaries$salary_adjust), "salary_adjust"]
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$salary_adjust)
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$salary_adjust)
highest_raise <- max(salaries$salary_adjust)
# What was the dollar value of the highest raise?
print(highest_raise <- max(salaries$salary_adjust))
salaries[salaries$salary_adjust == max(salaries$salary_adjust), salaries$salary_adjust]
salaries[salaries$salary_adjust == max(salaries$salary_adjust), salaries$salary_adjust]
salaries[salaries$salary_adjust == max(salaries$salary_adjust), "salary_adjust"]
employee <- paste("Employee", 1:100)
employee <- paste("Employee", 1:100)
salaries <- data.frame(employee, salary_2017, salary_adjust, stringsAsFactors = FALSE)
View(salaries)
salaries[salaries$salary_adjust == highest_raise, "employee"]
salaries[salaries$salary_adjust == highest_raise, "employee"]
max(-salaries$salary_adjust)
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjust == -4578.055, "employee"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjust == "-4578.055", "employee"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjust == "-4578.055", "employee"]
salaries[-salaries$salary_adjust == max(-salaries$salary_adjust), "employee"]
median(salaries$salary_adjust)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$salary_adjust[salaries$got_raise == FALSE])
View(salaries)
salaries$got_raise <- salaries$salary_adjust>0
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$salary_adjust[salaries$got_raise == FALSE])
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries.csv")
